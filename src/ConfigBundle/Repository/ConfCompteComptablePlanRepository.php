<?php

namespace ConfigBundle\Repository;

/**
 * ConfCompteComptablePlanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

use Doctrine\ORM\Tools\Pagination\Paginator;
use InvalidArgumentException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class ConfCompteComptablePlanRepository extends \Doctrine\ORM\EntityRepository
{

    public function findComptecomptable($name, $idplan)
    {
        $sql = "
                SELECT c.id, c.numCompteComptable, c.description
                FROM ConfigBundle:ConfCompteComptablePlan c  
                WHERE (c.description LIKE :name OR c.numCompteComptable LIKE :compte ) AND c.plan = :plan

                ";

        $qb = $this->getEntityManager()->createQuery($sql)
            ->setParameter('name', "%$name%")
            ->setParameter('compte', "$name")
            ->setParameter('plan', $idplan);

        $resultat = $qb->getResult();

        // die(dump($debit, $credit, $resultat));
        // on renvoie le resultat
        return $resultat;
    }

    public function findAllComptesPagineEtTrie($page, $nbMaxParPage)
    {
        if (!is_numeric($page)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $page est incorrecte (valeur : ' . $page . ').'
            );
        }

        if ($page < 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas');
        }

        if (!is_numeric($nbMaxParPage)) {
            throw new InvalidArgumentException(
                'La valeur de l\'argument $nbMaxParPage est incorrecte (valeur : ' . $nbMaxParPage . ').'
            );
        }

        $qb = $this->createQueryBuilder('c')
            ->where('c.supprimer = :sup ')
            ->orderBy('c.created', 'DESC')->setParameter('sup', FALSE);

        $query = $qb->getQuery();

        $premierResultat = ($page - 1) * $nbMaxParPage;
        $query->setFirstResult($premierResultat)->setMaxResults($nbMaxParPage);
        $paginator = new Paginator($query);

        if ( ($paginator->count() <= $premierResultat) && $page != 1) {
            throw new NotFoundHttpException('La page demandée n\'existe pas.'); // page 404, sauf pour la première page
        }

        return $paginator;
    }


}
