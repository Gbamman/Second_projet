<?php

namespace MetierBundle\Repository;

/**
 * MetierOperationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MetierOperationRepository extends \Doctrine\ORM\EntityRepository
{
	public function getTypeJournalParPeriode($datedebut, $datefin, $idsociete)
    {
        $qb = $this->getEntityManager()->createQuery('SELECT  j.id,j.codeJournal, j.libelle, j.compteContrePartie
                                                      FROM ConfigBundle:ConfJournal j
                                                      INNER JOIN MetierBundle:MetierOperation mo
                                                      WITH j.id = mo.journal
                                                      INNER JOIN MetierBundle:MetierDetailsOperation mdo
                                                      WITH mo.id = mdo.operation
                                                      WHERE j.societe = :pIdSociete AND mdo.dateValeur BETWEEN :datedebut AND :datefin GROUP BY j.id ORDER BY mdo.dateValeur DESC
                                                     ')
            ->setParameter('pIdSociete', $idsociete)
            ->setParameter('datedebut', $datedebut)
            ->setParameter('datefin', $datefin);
        // on renvoie le resultat sous forme d'un array
        return $qb->getResult();
    }

    public function getMouventParPeriodeEtParTypeOperation($datedebut, $datefin, $idoperation)
    {
        $qb = $this->getEntityManager()->createQuery('SELECT  m.id,m.sens, m.valeur, m.ancienSolde,m.nouveauSolde,m.espece,c.numCompteComptable,c.description,n.codeNatureOperation,n.designation
                                                      FROM MetierBundle:MetierMouvement m
                                                       LEFT JOIN ConfigBundle:ConfCompteComptablePlan c WITH c.id = m.compteComptablePlan
                                                       INNER JOIN ConfigBundle:ConfNatureOperation n WITH m.natureOperation = n.id
                                                      WHERE m.operation = :pIdOperation AND m.created BETWEEN :datedebut AND :datefin
                                                     ')
            ->setParameter('pIdOperation', $idoperation)
            ->setParameter('datedebut', $datedebut)
            ->setParameter('datefin', $datefin);
        // on renvoie le resultat sous forme d'un array
        return $qb->getResult();
    }

    public function getTypeOperationParPeriode($datedebut, $datefin, $idsociete,$idjournal)
    {
        $qb = $this->getEntityManager()->createQuery('SELECT o.id,o.idOperationFront, o.valeur, 
        												c.codeSchema,c.designation,j.codeJournal,o.libelle,j.compteContrePartie,o.created
                                                      FROM MetierBundle:MetierOperation o
                                                       LEFT JOIN ConfigBundle:ConfSchemaOperation c WITH c.id = o.schemaOperation
                                                        LEFT JOIN ConfigBundle:ConfJournal j WITH j.id = o.journal
                                                      INNER JOIN MetierBundle:MetierDetailsOperation mdo
                                                        WITH o.id = mdo.operation
                                                      WHERE o.societe = :pIdSociete AND o.journal = :pJournal AND mdo.dateValeur BETWEEN :datedebut AND :datefin ORDER BY mdo.dateValeur DESC
                                                     ')
            ->setParameter('pIdSociete', $idsociete)
            ->setParameter('pJournal', $idjournal)
            ->setParameter('datedebut', $datedebut)
            ->setParameter('datefin', $datefin);
        // on renvoie le resultat sous forme d'un array
        return $qb->getResult();
    }

    /*public function getTypeJournalParPeriode($datedebut, $datefin, $idsociete)
    {
        $qb = $this->getEntityManager()->createQuery('SELECT  v.datecours, v.coursseance, v.voltransiger, v.variation  
                                                      FROM OGIApiBundle:BoursikaHistoriquecours v
                                                      LEFT JOIN OGIApiBundle:BoursikaBasetitres b WITH b.idtitre = v.idtitre
                                                      WHERE v.idtitre = :pTitre AND v.datecours BETWEEN :datedebut AND :datefin
                                                     ')
            ->setParameter('pTitre', $titre)
            ->setParameter('datedebut', $dateDebut)
            ->setParameter('datefin', $datefin);
        // on renvoie le resultat sous forme d'un array
        return $qb->getResult();
    }*/
}
